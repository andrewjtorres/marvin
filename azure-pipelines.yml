variables:
  nodeVersion: 10.15.3
jobs:
  - job: root_linux
    displayName: Root on Linux
    pool:
      vmImage: ubuntu-16.04
    steps:
      - checkout: self
      - template: build/azure-pipelines/install-node.yml
        parameters:
          version: $(nodeVersion)
      - template: build/azure-pipelines/install-node-dependencies.yml
      - script: yarn --silent prettylint --ignore-path .gitignore '**/*.{json,md,yml}' '!packages/**'
        displayName: Run static analysis
  - job: ai_linux
    displayName: AI on Linux
    pool:
      vmImage: ubuntu-16.04
    variables:
      coverageDirectory: coverage/ai
      poetryVersion: 0.12.11
      pythonVersion: 3.7.0
      reportsDirectory: reports/ai
      workingDirectory: packages/ai
    steps:
      - checkout: self
      - template: build/azure-pipelines/install-node.yml
        parameters:
          version: $(nodeVersion)
      - template: build/azure-pipelines/use-python-version.yml
        parameters:
          version: $(pythonVersion)
      - template: build/azure-pipelines/install-node-dependencies.yml
      - script: |
          pip install --upgrade pip
          pip install poetry==$(poetryVersion)
          mkdir --parents $(coverageDirectory) $(reportsDirectory)
        displayName: Setup
        workingDirectory: $(workingDirectory)
      - script: poetry install
        displayName: Install Python dependencies
        workingDirectory: $(workingDirectory)
      - script: |
          yarn --silent lint-misc
          yarn --silent lint-scripts --format junit-xml --output-file $(reportsDirectory)/lint-scripts-results.xml
        displayName: Run static analysis
        workingDirectory: $(workingDirectory)
      - script: yarn --silent test-units --cov ai --cov-branch --cov-report xml --junitxml $(reportsDirectory)/test-units-results.xml
        displayName: Run tests
        workingDirectory: $(workingDirectory)
      - template: build/azure-pipelines/publish-pipeline-artifact.yml
        parameters:
          artifactName: coverage
          targetPath: $(workingDirectory)/coverage
      - template: build/azure-pipelines/publish-code-coverage.yml
        parameters:
          options: -F ai --clear -f $(workingDirectory)/$(coverageDirectory)/coverage.xml -t $(codecovToken)
      - template: build/azure-pipelines/publish-pipeline-artifact.yml
        parameters:
          artifactName: reports
          targetPath: $(workingDirectory)/reports
      - template: build/azure-pipelines/publish-tests-results.yml
        parameters:
          searchFolder: $(workingDirectory)/$(reportsDirectory)
