variables:
  nodeVersion: 10.16.0
jobs:
  - job: root_linux
    displayName: Root on Linux
    pool:
      vmImage: ubuntu-16.04
    steps:
      - checkout: self
      - task: NodeTool@0
        displayName: Install Node
        inputs:
          versionSpec: $(nodeVersion)
      - script: yarn install
        displayName: Install Node dependencies
      - script: yarn --silent lint:files
        displayName: Run static analysis
  - job: ai_linux
    displayName: AI on Linux
    pool:
      vmImage: ubuntu-16.04
    variables:
      coverageDirectory: coverage/ai
      poetryVersion: 0.12.16
      pythonVersion: 3.7.2
      reportsDirectory: reports/ai
      workingDirectory: packages/ai
    steps:
      - checkout: self
      - task: NodeTool@0
        displayName: Install Node
        inputs:
          versionSpec: $(nodeVersion)
      - task: UsePythonVersion@0
        displayName: Use Python version
        inputs:
          versionSpec: $(pythonVersion)
      - script: yarn install
        displayName: Install Node dependencies
      - script: |
          mkdir --parents $(coverageDirectory) $(reportsDirectory)
          pip install --upgrade pip poetry==$(poetryVersion)
        displayName: Setup
        workingDirectory: $(workingDirectory)
      - script: poetry install
        displayName: Install Python dependencies
        workingDirectory: $(workingDirectory)
      - script: |
          yarn --silent lint:files
          yarn --silent lint:scripts --format junit-xml --output-file $(reportsDirectory)/lint-scripts.xml
          yarn --silent lint:types --junit-xml $(reportsDirectory)/lint-types.xml
        displayName: Run static analysis
        workingDirectory: $(workingDirectory)
      - script: yarn --silent test:units --cov ai --cov-branch --cov-report html --cov-report xml --doctest-modules --junit-xml $(reportsDirectory)/test-units.xml
        displayName: Run tests
        workingDirectory: $(workingDirectory)
      - script: yarn --silent codecov --flags=ai --token=$(codecovToken)
        displayName: Publish code coverage results
      - task: PublishPipelineArtifact@0
        displayName: Publish coverage artifact
        inputs:
          artifactName: coverage
          targetPath: $(workingDirectory)/coverage
      - task: PublishPipelineArtifact@0
        displayName: Publish reports artifact
        inputs:
          artifactName: reports
          targetPath: $(workingDirectory)/reports
      - task: PublishTestResults@2
        displayName: Publish tests results
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/*.xml'
          searchFolder: $(System.DefaultWorkingDirectory)/$(workingDirectory)/$(reportsDirectory)
