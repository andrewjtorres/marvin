variables:
  - name: NODE_VERSION
    value: 10.16.0
  - name: PYTHON_VERSION
    value: 3.7.2
  - name: YARN_CACHE_DIR
    value: $(pipeline.workspace)/.yarn
stages:
  - stage: root
    displayName: Root
    jobs:
      - job: setup
        displayName: Setup
        pool:
          vmImage: ubuntu-16.04
        steps:
          - task: NodeTool@0
            displayName: Install Node
            inputs:
              versionSpec: $(NODE_VERSION)
          - template: templates/setup-yarn.yml
            parameters:
              path: $(YARN_CACHE_DIR)
          - template: templates/cache-yarn-packages.yml
            parameters:
              path: $(YARN_CACHE_DIR)

          - script: yarn --version

          - script: yarn install --frozen-lockfile
            displayName: Install Node dependencies
      - job: static_analysis
        displayName: Static Analysis
        dependsOn:
          - setup
        pool:
          vmImage: ubuntu-16.04
        steps:
          - task: NodeTool@0
            displayName: Install Node
            inputs:
              versionSpec: $(NODE_VERSION)
          - template: templates/setup-yarn.yml
            parameters:
              path: $(YARN_CACHE_DIR)
          - template: templates/cache-yarn-packages.yml
            parameters:
              path: $(YARN_CACHE_DIR)
          - script: yarn install --frozen-lockfile
            displayName: Install Node dependencies
          - script: yarn --silent lint:files
            displayName: Lint files
  - stage: ai
    displayName: AI
    dependsOn:
      - root
    variables:
      - name: COVERAGE_DIR
        value: coverage
      - name: POETRY_CACHE_DIR
        value: $(pipeline.workspace)/$(WORKING_DIR)/.poetry
      - name: REPORTS_DIR
        value: reports
      - name: WORKING_DIR
        value: packages/ai
    jobs:
      - job: setup
        displayName: Setup
        pool:
          vmImage: ubuntu-16.04
        steps:
          - task: UsePythonVersion@0
            displayName: Use Python version
            inputs:
              versionSpec: $(PYTHON_VERSION)
          - template: templates/setup-poetry.yml
            parameters:
              path: $(POETRY_CACHE_DIR)
          - template: templates/cache-poetry-packages.yml
            parameters:
              key: $(WORKING_DIR)/poetry.lock
              path: $(POETRY_CACHE_DIR)
          - script: poetry install
            displayName: Install Python dependencies
            workingDirectory: $(WORKING_DIR)
      - job: static_analysis
        displayName: Static Analysis
        dependsOn:
          - setup
        pool:
          vmImage: ubuntu-16.04
        steps:
          - task: NodeTool@0
            displayName: Install Node
            inputs:
              versionSpec: $(NODE_VERSION)
          - template: templates/setup-yarn.yml
            parameters:
              path: $(YARN_CACHE_DIR)
          - template: templates/cache-yarn-packages.yml
            parameters:
              path: $(YARN_CACHE_DIR)
          - script: yarn install --frozen-lockfile
            displayName: Install Node dependencies
          - task: UsePythonVersion@0
            displayName: Use Python version
            inputs:
              versionSpec: $(PYTHON_VERSION)
          - template: templates/setup-poetry.yml
            parameters:
              path: $(POETRY_CACHE_DIR)
          - template: templates/cache-poetry-packages.yml
            parameters:
              key: $(WORKING_DIR)/poetry.lock
              path: $(POETRY_CACHE_DIR)
          - script: poetry install
            displayName: Install Python dependencies
            workingDirectory: $(WORKING_DIR)
          - script: yarn --silent lint:files
            displayName: Lint files
            workingDirectory: $(WORKING_DIR)
          - script: yarn --silent lint:scripts --format junit-xml --output-file $(REPORTS_DIR)/lint-scripts.xml
            displayName: Lint scripts
            workingDirectory: $(WORKING_DIR)
          - script: yarn --silent lint:types --junit-xml $(REPORTS_DIR)/lint-types.xml
            displayName: Lint types
            workingDirectory: $(WORKING_DIR)
          - task: PublishTestResults@2
            displayName: Publish tests results
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/*.xml'
              searchFolder: $(system.defaultWorkingDirectory)/$(WORKING_DIR)/$(REPORTS_DIR)
      - job: test
        displayName: Test
        dependsOn:
          - setup
        pool:
          vmImage: ubuntu-16.04
        steps:
          - task: NodeTool@0
            displayName: Install Node
            inputs:
              versionSpec: $(NODE_VERSION)
          - template: templates/setup-yarn.yml
            parameters:
              path: $(YARN_CACHE_DIR)
          - template: templates/cache-yarn-packages.yml
            parameters:
              path: $(YARN_CACHE_DIR)
          - script: yarn install --frozen-lockfile
            displayName: Install Node dependencies
          - task: UsePythonVersion@0
            displayName: Use Python version
            inputs:
              versionSpec: $(PYTHON_VERSION)
          - template: templates/setup-poetry.yml
            parameters:
              path: $(POETRY_CACHE_DIR)
          - template: templates/cache-poetry-packages.yml
            parameters:
              key: $(WORKING_DIR)/poetry.lock
              path: $(POETRY_CACHE_DIR)
          - script: poetry install
            displayName: Install Python dependencies
            workingDirectory: $(WORKING_DIR)
          - script: yarn --silent test:units --cov ai --cov-branch --cov-report html --cov-report xml --doctest-modules --junit-xml $(REPORTS_DIR)/test-units.xml
            displayName: Test units
            workingDirectory: $(WORKING_DIR)
          - script: yarn codecov -F ai -t $(CODECOV_TOKEN)
            displayName: Publish code coverage results
          - task: PublishTestResults@2
            displayName: Publish tests results
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/*.xml'
              searchFolder: $(system.defaultWorkingDirectory)/$(WORKING_DIR)/$(REPORTS_DIR)
trigger:
  branches:
    include:
      - master
pr:
  branches:
    include:
      - master
